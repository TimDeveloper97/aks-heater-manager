@{
    Layout = null;
    if (DB.Accounts.Find("0") == null)
    {
        DB.Accounts.Insert(new Account("0", "1", "Admin"));
    }
}

<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />

    <title>@(ViewBag.Title ?? DB.Config.Name)</title>

    @MyHelper.Fonts("css")
    @MyHelper.Css()
    @MyHelper.Scripts()
    @MyHelper.Scripts("vst")

    @{
        var roles = new Document();
        foreach (var p in DB.Config.User)
        {
            roles.Add(p.Key, Document.FromObject(p.Value).Name);
        }
    }
    <style>
        .form-caption a {
            margin-right: 1em;
        }
    </style>
</head>
<body>
    <div class="mt-10">
        <div id="rol-form"></div>
        <div id="acc-form"></div>
    </div>
    <script>
        var actor = new Actor("guest");
        class LoginForm extends SingleForm {
            constructor(role) {
                super("#acc-form")

                function error(s) {
                    loginForm.comment(s, "danger");
                }

                let ed = {
                    un: new PhoneBox().caption("Số điện thoại").required(),
                    ps: new PasswordBox().caption("Mật khẩu").required(),
                }

                if (role == "Admin") {
                    ed.un = null;
                }
                else if (role == "SinhVien") {
                    ed.un.caption("Mã số sinh viên")
                }
                this.controls(ed).title("<a href='#' onclick='loginForm.back()'><i class='fa fa-arrow-left'></i></a>Tài khoản")

                request.error = function () { error("Sai tên người dùng hoặc mật khẩu") }
                this.accept("Đăng nhập", v => {
                    const key = '@AppKeys.LoginInfo'
                    let data = {
                        userName: v.un ?? "0",
                        password: v.ps,
                    }
                    cookie.set(key, data);
                    actor.post("login", data, () => redirect('/'));
                })

                this.back = function () {
                    this.content.children().remove()
                    roleForm.show()
                }
            }
        }
        class RoleForm extends SingleForm {
            constructor() {
                super("#rol-form");
                this.controls({ role: new SingleChoiceBox().caption().options(@roles.ToHtml()) })
                this.val({ role: "SinhVien" })
                this.title("Chọn quyền truy cập")
                    .accept("Xác nhận", v => {
                        this.hide();
                        loginForm = new LoginForm(v.role);
                    })
            }
        }
        let roleForm = new RoleForm();
        let loginForm = null;
    </script>
</body>
</html>
